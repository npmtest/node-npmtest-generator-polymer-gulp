{"/home/travis/build/npmtest/node-npmtest-generator-polymer-gulp/test.js":"/* istanbul instrument in package npmtest_generator_polymer_gulp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-polymer-gulp/lib.npmtest_generator_polymer_gulp.js":"/* istanbul instrument in package npmtest_generator_polymer_gulp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_generator_polymer_gulp = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_generator_polymer_gulp = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-polymer-gulp/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-generator-polymer-gulp && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_generator_polymer_gulp */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_generator_polymer_gulp\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_generator_polymer_gulp.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_generator_polymer_gulp.rollup.js'] =\n            local.assetsDict['/assets.npmtest_generator_polymer_gulp.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_generator_polymer_gulp.__dirname + '/lib.npmtest_generator_polymer_gulp.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-generator-polymer-gulp/node_modules/generator-polymer-gulp/app/index.js":"'use strict';\nvar util = require('util');\nvar path = require('path');\nvar yeoman = require('yeoman-generator');\nvar yosay = require('yosay');\nvar chalk = require('chalk');\n\nvar PolymerGulpGenerator = yeoman.generators.Base.extend({\n  init: function () {\n\n    this.bowerComponentsDir = 'lib/.bower_components';\n\n    this.on('end', function () {\n      if (!this.options['skip-install']) {\n        this.installDependencies();\n      }\n    });\n  },\n\n  askFor: function () {\n    var done = this.async();\n\n    // Have Yeoman greet the user.\n    this.log(yosay(chalk.white('Let me scaffold a', chalk.magenta(' polymer component'), chalk.white(' template for you!'))));\n\n    var defaultName = path.basename(process.cwd());\n    var prompts = [{\n      name: 'componentName',\n      message: 'What is your component\\'s name',\n      default: defaultName\n    },{\n      when: function(props){return true;},\n      name: 'componentDescription',\n      message: 'Please provide a short description for your component',\n      default: \"Awesome stuff, the modular and interoperable way\"\n    },{\n      when: function(props){return true;},\n      name: 'sassOrScss',\n      message: 'Sass or Scss, this is the question',\n      type: 'rawlist',\n      choices: ['sass', 'scss'],\n      default: 0\n    },{\n      when: function(props){return true;},\n      type: 'confirm',\n      name: 'useGithub',\n      message: 'Would you like to use github for this component?',\n      default: true\n    },{\n      when: function(props){return props.useGithub;},\n      type: 'input',\n      name: 'ghUser',\n      message: 'Could you please provide me with your github username ?',\n      default: 'aGithubUserName'\n    },{\n      when: function(props){return !props.useGithub;},\n      type: 'input',\n      name: 'componentPage',\n      message: 'Please provide me with a specific reference page for this component ? (optional)',\n      default: ''\n    }];\n\n    this.prompt(prompts, function (props) {\n      this.componentName = props.componentName;\n      this.componentDescription = props.componentDescription;\n      this.sassOrScss = props.sassOrScss;\n      if(props.useGithub){\n        this.componentPage = 'http://' + props.ghUser + '.github.io/' + this._.slugify(this.componentName);\n      }else{\n        this.componentPage = props.componentPage || \"\";\n      }\n      done();\n    }.bind(this));\n  },\n\n  app: function () {\n    // name for core component files (html, css, js)\n    var componentFileName = this._.slugify(this.componentName);\n\n    var srcDir = 'app';\n    this.mkdir(srcDir);\n    var componentRootDir = srcDir + '/';\n    this.mkdir(componentRootDir + 'scripts');\n    this.mkdir(componentRootDir + 'images');\n    this.mkdir(componentRootDir + 'public');\n    this.mkdir(componentRootDir + 'styles');\n\n    var copyToComponentRootDir = function(arrayOfArrays){\n      var ary = [\"\", \"\"];\n      for(var i=0;i<arrayOfArrays.length;i++){\n        ary = arrayOfArrays[i];\n        this.template(ary[0], componentRootDir + ary[1]);\n      }\n    }.bind(this);\n\n    copyToComponentRootDir([\n      ['app/_component.html', componentFileName + '.html'],\n      ['app/_index.html', 'index.html'],\n      ['app/_demo.html', 'demo.html'],\n      ['app/styles/_component.' + this.sassOrScss, 'styles/' + componentFileName + '.' + this.sassOrScss],\n      ['app/styles/components/_components.' + this.sassOrScss, 'styles/components/components.' + this.sassOrScss],\n      ['app/scripts/_component.js', 'scripts/' + componentFileName + '.js'],\n      ['app/scripts/components/_components.js', 'scripts/components/components.js']\n    ]);\n  },\n\n  projectfiles: function () {\n    this.template('_gulpfile.js', 'gulpfile.js');\n    this.template('_bower.json', 'bower.json');\n    this.template('_package.json', 'package.json');\n    this.template('_bowerrc', '.bowerrc');\n    this.copy('editorconfig', '.editorconfig');\n    this.copy('jshintrc', '.jshintrc');\n    this.copy('gitignore', '.gitignore');\n    this.copy('gitattributes', '.gitattributes');\n    this.copy('travis.yml', '.travis.yml');\n  }\n});\n\nmodule.exports = PolymerGulpGenerator;\n","/home/travis/build/npmtest/node-npmtest-generator-polymer-gulp/node_modules/generator-polymer-gulp/app/templates/_gulpfile.js":"'use strict';\n\nvar glob            = require('glob');\nvar path            = require('path');\n\nvar gulp            = require('gulp');\nvar $               = require('gulp-load-plugins')();\nvar runSequence     = require('run-sequence');\n\nvar rimraf          = require('rimraf');\nvar browserSync     = require('browser-sync');\nvar reload          = browserSync.reload;\nvar pagespeed       = require('psi');\nvar stylishReporter = require('jshint-stylish');\n\nvar tmpDir = '_tmp';\nvar distDir = '_dist';\nvar vulcanizedDir = '_vulcanized';\nvar vulcanizedDirBase = 'raw';\nvar vulcanizedDirInline = 'inline';\nvar vulcanizedDirCsp = 'csp';\n\nvar sizeOf = function(stream, title){\n  return stream\n    .pipe($.size({title: title}));\n};\n\n// --------------------------------------------------------\n// Lint JavaScript\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('jshint', function () {\n    return jshint();\n  });\n\n  gulp.task('jshint:breaking', function () {\n    return jshint()\n      .pipe($.jshint.reporter('fail'));\n  });\n\n  var jshint = function(){\n    return gulp.src('app/scripts/**/*.js')\n      .pipe($.jshint())\n      .pipe($.jshint.reporter(stylishReporter))\n  }.bind(scope);\n\n})(this);\n\n// --------------------------------------------------------\n// Build JavaScript\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('scripts:dev', ['jshint:breaking'], function() {\n    return sizeOf(scriptsBrowserify('dev'), 'scripts:dev');\n  });\n\n  gulp.task('p-scripts:dev:reload', ['jshint'], function() {\n    return sizeOf(\n      scriptsBrowserify('dev')\n        .pipe(reload({stream: true, once: true}))\n      , 'scripts:dev');\n  });\n\n  gulp.task('p-scripts:pre:package', ['jshint:breaking'], function() {\n    return sizeOf(scriptsBrowserify('prod'), 'scripts:pre:package');\n  });\n\n  gulp.task('scripts:package', ['jshint:breaking'], function() {\n    return scope.htmlPackage(['p-scripts:package:now']);\n  })\n\n  gulp.task('p-scripts:package:now', function(){\n    var jsBundles = [distDir + '/scripts/<%= _.slugify(componentName) %>.min.js'];\n    glob(distDir + '/scripts/**/*-b.js', function(er, filesArray){\n      for(var i=0;i<filesArray.length;i++){\n        jsBundles.push(filesArray[i]);\n      }\n    })\n\n    for(var i=0;i<jsBundles.length;i++){\n      // FIXME\n      // inelegant way of returning something\n      // for run-sequence - we return the last one\n      // as we want to iterate over each found path\n      // to retrieve filename and pass it to closure compiler\n      if(i<jsBundles-1){\n        compileJS(jsBundles[i]);\n      }else{\n        return compileJS(jsBundles[i]);\n      }\n    }\n  });\n\n  var scriptsBrowserify = function(env){\n    var jsBundles = ['app/scripts/<%= _.slugify(componentName) %>.js'];\n    glob('app/scripts/**/*-b.js', function(er, filesArray){\n      for(var i=0;i<filesArray.length;i++){\n        jsBundles.push(filesArray[i]);\n      }\n    })\n    // Single point of entry (make sure not to src ALL your files, browserify will figure it out)\n    return gulp.src(jsBundles)\n      .pipe($.browserify({\n        insertGlobals: env === 'prod' ? false : true,\n        debug: false\n      }))\n\n      // Preprocess\n      .pipe($.preprocess({context: {ENV: env}}))\n\n      // Output it to tmp folder\n      .pipe(gulp.dest(tmpDir + '/scripts'))\n  }.bind(scope);\n\n  var compileJS = function(filepath){\n    var currentFilename = path.basename(filepath, path.extname(filepath));\n    return gulp.src(filepath)\n      .pipe($.stripDebug())\n      .pipe($.closureCompiler({\n        compilerPath    : 'lib/.bower_components/closure-compiler/compiler.jar',\n        fileName        : currentFilename + '.js',\n        compilerFlags   : {\n          warning_level : 'QUIET'\n          //, language_in      : 'ECMASCRIPT5_STRICT'\n        }\n      }))\n      .pipe(gulp.dest(distDir + '/scripts'))\n      .pipe($.zopfli())\n      .pipe(gulp.dest(distDir + '/scripts'))\n  }.bind(scope);\n\n})(this);\n\n// --------------------------------------------------------\n// Build Images\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('images:dev', function () {\n    return sizeOf(imagesSymlink()\n      , 'images:dev');\n  });\n\n  gulp.task('p-images:dev:reload', function () {\n    return sizeOf(imagesSymlink()\n      .pipe(reload({stream: true, once: true}))\n      , 'images:dev');\n  });\n\n  gulp.task('images:package', function () {\n    return sizeOf(imagesPackage()\n      , 'images:package');\n  });\n\n  var imagesSymlink = function () {\n    return gulp.src('app/images/**/*')\n        .pipe($.symlink(tmpDir + '/images'));\n  }.bind(scope);;\n\n  var imagesPackage = function () {\n    return gulp.src('app/images/**/*')\n        .pipe($.cache($.imagemin({\n            progressive: true,\n            interlaced: true\n        })))\n        .pipe(gulp.dest(distDir + '/images'));\n  }.bind(scope);\n\n})(this);\n\n// --------------------------------------------------------\n// Build Public folder\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('public:dev', function () {\n    return sizeOf(publicSymlink()\n      , 'public:dev');\n  });\n\n  gulp.task('p-public:dev:reload', function () {\n    return sizeOf(publicSymlink()\n      .pipe(reload({stream: true, once: true}))\n      , 'public:dev');\n  });\n\n  gulp.task('public:package', function () {\n    return sizeOf(publicPackage()\n      , 'public:package');\n  });\n\n  var publicSymlink = function () {\n    return gulp.src('app/public/**/*')\n        .pipe($.symlink(tmpDir + '/public'));\n  }.bind(scope);;\n\n  var publicPackage = function () {\n    return gulp.src('app/public/**/*')\n        .pipe(gulp.dest(distDir + '/public'));\n  }.bind(scope);\n\n})(this);\n\n// --------------------------------------------------------\n// Build Css\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('styles:dev', function () {\n    return sizeOf(stylesBuild()\n      , 'styles:dev');\n  });\n\n  gulp.task('p-styles:dev:reload', function () {\n    return sizeOf(stylesBuild()\n      .pipe($.filter('**/*.css')) // Filtering stream to only css files\n      .pipe(reload({stream: true, once: true}))\n      , 'styles:dev');\n  });\n\n  gulp.task('styles:package', function(){\n    return scope.htmlPackage(['p-styles:package:now']);\n  })\n\n  gulp.task('p-styles:package:now', function(){\n    var htmlFiles = [];\n    glob(tmpDir + '/**/*.html', function(er, filesArray){\n      var file = \"\";\n      for(var i=0;i<filesArray.length;i++){\n        file = filesArray[i];\n        if(!file.match(new RegExp('^' + distDir + '/lib')))\n          htmlFiles.push(filesArray[i]);\n      }\n    })\n    // uncss and minify used css in distDir\n    return gulp.src(distDir + '/styles/**/*.css', {base: distDir + '/'})\n      .pipe($.uncss({ html: htmlFiles }))\n      .pipe($.csso())\n      .pipe(gulp.dest(distDir))\n  });\n\n  // Compile all other css && sass Files\n  var stylesBuild = function(){\n    return gulp.src(['app/styles/**/*.{css,scss,sass}'])\n        .pipe($.if(function(file){\n            var ext = path.extname(file.path);\n            return ext !== '.css';\n          }, $.rubySass({\n              style: 'expanded',\n              precision: 10,\n              loadPath: ['app/styles']\n        })))\n        .pipe($.autoprefixer('last 1 version'))\n        .pipe(gulp.dest(tmpDir + '/styles'))\n  }.bind(scope);\n\n})(this);\n\n// --------------------------------------------------------\n// Send external libs to lib\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('lib:dev', function () {\n    return copyBowerComponentsToLib('dev')\n  });\n\n  gulp.task('p-lib:dev:reload', function () {\n    return copyBowerComponentsToLib('dev')\n      .pipe(reload({stream: true, once: true}));\n  });\n\n  gulp.task('lib:package', function () {\n    return copyBowerComponentsToLib('prod')\n  });\n\n  var copyBowerComponentsToLib = function(env){\n    var src = ['lib/.bower_components/**/*.{css,js,html,swf}*'];\n    var dest = env === 'dev' ? tmpDir : distDir;\n    return gulp.src(src)\n      .pipe(gulp.dest(dest + '/lib'));\n  }.bind(scope);\n\n})(this);\n\n// --------------------------------------------------------\n// Send html to tmpDir\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('html:dev', function(){\n    return htmlDev();\n  });\n\n  gulp.task('p-html:dev:reload', ['p-images:dev:reload', 'p-public:dev:reload'], function(){\n    return htmlDev()\n      .pipe(reload({stream: true, once: true}));\n  });\n\n  var htmlDev = function(){\n    return gulp.src('app/**/*.html')\n      .pipe(gulp.dest(tmpDir));\n  };\n\n})(this);\n\n// --------------------------------------------------------\n// Package html and used css / js\n// --------------------------------------------------------\n\n(function(scope){\n\n  scope.htmlPackage = function(){\n\n    // *inelegant*\n    // We want to use useref parse html and\n    // build only assets (css, js) needed in prod\n    // into distDir\n    // Useref will basically build/copy assets based\n    // on prebuilt assets in tmpDir\n    // What if we need to prebuild assets differently\n    // for prod and dev (ex with browserify being passed\n    // different params in dev and prod).\n    // What we do here is prebuilding assets with a prod\n    // flag instead of dev\n    // Then we execute useref\n    // And when we are done we reprebuild everything\n    // for dev so that there is no surprise to find prod\n    // assets in tmpDir when in development\n    // NB: Once we have executed useref, we have the correct\n    // in distDir and we are not dependent of files in tmpDir for\n    // further build steps\n    runSequence(\n      'p-assets:prepare:package',\n      ['p-html:package:now','lib:package'],\n      arguments[0] || 'p-dummy-do:nothing',\n      arguments[1] || 'p-dummy-do:nothing',\n      arguments[2] || 'p-dummy-do:nothing',\n      arguments[3] || 'p-dummy-do:nothing',\n      function(){\n        return gulp.start('p-assets:prepare:dev');\n      }\n    );\n  };\n\n  gulp.task('p-html:package:now', function(){\n    return gulp.src(tmpDir + '/**/*.html')\n      .pipe($.useref.assets({searchPath: tmpDir}))\n      .pipe($.useref.restore())\n      .pipe($.useref())\n      // Minify HTML\n      .pipe($.if(function(file){\n        var ext = path.extname(file.path);\n        return ext !== '.js' && ext !== '.css';\n      }, $.minifyHtml()))\n      // output\n      .pipe(gulp.dest(distDir))\n      .pipe($.size({title: 'html'}));\n  });\n\n  gulp.task('p-assets:prepare:dev', [ 'html:dev', 'styles:dev', 'images:dev', 'public:dev', 'lib:dev',\n    'scripts:dev' ],\n    function(){ return true; }\n  );\n\n  gulp.task('p-assets:prepare:package', [ 'html:dev', 'styles:dev', 'images:dev', 'public:dev', 'lib:dev',\n    'p-scripts:pre:package' ], function(){\n    return gulp.start('p-scripts:pre:package');\n  });\n\n  gulp.task('p-dummy-do:nothing');\n\n})(this);\n\n// --------------------------------------------------------\n// Clean Output Directory\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('clean:vulcanizedDir', function (cb) {\n      rimraf(vulcanizedDir, cb);\n  });\n  gulp.task('clean:distDir', function (cb) {\n      rimraf(distDir, cb);\n  });\n  gulp.task('clean:tmpDir', function (cb) {\n      rimraf(tmpDir, cb);\n  });\n  gulp.task('clean', ['clean:tmpDir', 'clean:distDir','clean:vulcanizedDir']);\n\n})(this);\n\n// --------------------------------------------------------\n// Create server, Watch Files For Changes & Reload\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('serve', ['p-assets:prepare:dev'], function () {\n      browserSync.init(null, {\n          server: {\n              baseDir: [tmpDir]\n          },\n          notify: false\n      });\n\n      gulp.watch(['app/**/*.html']                            , ['p-html:dev:reload']);\n      gulp.watch(['app/styles/**/*.{css,scss,sass}']          , ['p-styles:dev:reload']);\n      gulp.watch(['app/scripts/**/*.js']                      , ['p-scripts:dev:reload']);\n      gulp.watch(['app/images/**/*.*']                        , ['p-images:dev:reload']);\n      gulp.watch(['app/public/**/*.*']                        , ['p-public:dev:reload']);\n      gulp.watch(['lib/.bower_components/**/*.{css,js,html}'] , ['p-lib:dev:reload']);\n  });\n\n})(this);\n\n// --------------------------------------------------------\n// Build Prod files & Vulcanized Polymer\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('default', ['clean'], function () {\n    runSequence(\n      ['vulcanize','p-copy-bower-to-dist']\n    );\n  });\n\n  gulp.task('p-copy-bower-to-dist', function () {\n    return gulp.src('bower.json')\n      .pipe(gulp.dest(distDir + '/'));\n  });\n\n  var assetsPackageTasks = [\n    'p-styles:package:now',\n    'p-scripts:package:now',\n    'images:package',\n    'public:package',\n    'lib:package'\n  ];\n\n  var destDir = distDir + '/' + vulcanizedDir + '/';\n\n  gulp.task('vulcanize', ['clean:vulcanizedDir'], function () {\n    return scope.htmlPackage(\n      assetsPackageTasks,\n      'vulcanize:inline:now',\n      'vulcanize:base:now',\n      'vulcanize:csp:now'\n    );\n  });\n\n  // vulcanize in inline mode\n  gulp.task('vulcanize:inline',function(){\n    return scope.htmlPackage(\n      assetsPackageTasks,\n      'vulcanize:inline:now'\n    );\n  });\n\n  gulp.task('vulcanize:inline:now',function(){\n    return gulp.src(distDir + '/<%= _.slugify(componentName) %>.html', {base: distDir + '/'})\n      .pipe($.vulcanize({\n        dest: destDir + vulcanizedDirInline + '/',\n        inline: true\n      }));\n  });\n\n  // vulcanize in csp mode\n  gulp.task('vulcanize:csp',function(){\n    return scope.htmlPackage(\n      assetsPackageTasks,\n      'vulcanize:csp:now'\n    );\n  });\n\n  gulp.task('vulcanize:csp:now', function(){\n    return vulcanizeWithExternalScriptsAndStyles({\n      dest: destDir + vulcanizedDirCsp + '/',\n      csp: true\n    });\n  });\n\n  // vulcanize in standard mode\n  gulp.task('vulcanize:base',function(){\n    return scope.htmlPackage(\n      assetsPackageTasks,\n      'vulcanize:base:now'\n    );\n  });\n\n  gulp.task('vulcanize:base:now', function(){\n    return vulcanizeWithExternalScriptsAndStyles({\n      dest: destDir + vulcanizedDirBase + '/'\n    });\n  });\n\n  var vulcanizeWithExternalScriptsAndStyles = function(vulcanizeOptions){\n    return gulp.src(tmpDir + '/<%= _.slugify(componentName) %>.html')\n      // add needed css and js\n      .pipe($.useref.assets({searchPath: tmpDir}))\n      .pipe($.tap(function(file,t){\n        var pathS = file.path.split(new RegExp('/' + tmpDir + '/'));\n        var base = pathS[0] + '/' + distDir + '/';\n        var path = base + pathS[1];\n        return gulp.src(path, {base: base})\n          .pipe(gulp.dest(vulcanizeOptions.dest));\n      }))\n      .pipe($.useref.restore())\n      .pipe($.tap(function(file,t){\n        return gulp.src(distDir + '/<%= _.slugify(componentName) %>.html', {base: distDir + '/'})\n          .pipe(gulp.dest(vulcanizeOptions.dest))\n          .pipe($.vulcanize(vulcanizeOptions));\n      }));\n  };\n\n})(this);\n\n// --------------------------------------------------------\n// PageSpeed\n// --------------------------------------------------------\n\n(function(scope){\n\n  gulp.task('pagespeed', pagespeed.bind(null, {\n      // key: 'YOUR_API_KEY' // http://goo.gl/RkN0vE\n      url: 'https://please.update.me',\n      strategy: 'mobile'\n  }));\n\n})(this);\n"}